x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
bcluster(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
bcluster(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
objects=x
objects
root = binaryTree(1, 1);
tree = list();
tree[[1]] = root;
closure   = environment();
tree
save = function(x) assign("tree", x, envir = closure);
read = function() get("tree", envir = closure);
evalIndex = function(bin, y) {
x = objects[[bin$index]];
i = compares(x, y);
i;
}
compares
compares = index
compares
save(tree);
str(tree)
index    = 1;
item = objects[[1]]
item
bin   = root;
root
index = index + 1;
index
bin
index
item
order = evalIndex(bin, item);
order
index
l = list(a=1,b=2,c=3)
l[2:length(l)]
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
x
x =3
repeat {  x = 5; break  }
x
x =3
i=1
repeat {  x = 5; i=i+1; if (i > 3) { break}  }
i
x
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
library(bclusterTree)
str(bcluster(x, index));
library(bclusterTree)
str(bcluster(x, index));
library(bclusterTree)
str(bcluster(x, index));
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
library(bclusterTree)
library(bclusterTree)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
x
str(bcluster(x, index));
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
c = bcluster(x, index)
c
x
x[c$'BIN-1']
x[c$'BIN-2']
x[c$'BIN-3']
x[c$'BIN-4']
x[c$'BIN-5']
x[c$'BIN-6']
x[c$'BIN-7']
x[c$'BIN-8']
c = bcluster(x, index)
for(name in names(c)) {
print(name);
print(x[c[[name]]]);
}
x = runif(100);
y = runif(100);
seq = lapply(1:length(x), function(i) list(v = c(x[i], y[i])));
dist = function(p1, p2) {
sqrt(sum((p1$v - p2$v) ^ 2))
}
index = function(p1, p2) {
d = dist(p1, p2);
if (d <= 0.1) {
0
} else if (d <= 0.3) {
1
} else {
-1
}
}
c = bcluster(seq, index);
c
x = runif(100);
y = runif(100);
seq = lapply(1:length(x), function(i) list(v = c(x[i], y[i])));
dist = function(p1, p2) {
sqrt(sum((p1$v - p2$v) ^ 2))
}
index = function(p1, p2) {
d = dist(p1, p2);
if (d <= 0.25) {
0
} else if (d <= 0.5) {
1
} else {
-1
}
}
c = bcluster(seq, index);
c
str(c)
x
x[c$"BIN-1"]
y[c$"BIN-1"]
plot(x, y, pch = 2, col = "white");
plot(x, y, pch = 2, col = "black");
plot(x, y, pch = 2, col = "white");
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col="red", bg="blue");
break;
}
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","purple","black", "gray");
colors1 = c("red","blue","green","yellow","purple","black", "gray");
i=1;
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors2[i]);
i=i+1;
}
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","purple","black", "gray");
colors2 = c("red","blue","green","yellow","purple","black", "gray");
i=1;
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors2[i]);
i=i+1;
}
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","purple","black", "gray","cyan","lime");
colors2 = c("red","blue","green","yellow","purple","black", "gray","cyan","lime");
i=1;
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors2[i]);
i=i+1;
}
colors()
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
colors2 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
i=1;
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors2[i]);
i=i+1;
}
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
colors2 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
i=1;
print(colors1);
print(names(c));
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors2[i]);
i=i+1;
}
legend("topleft", inset=.05, title="Clusters", names(c), lty=c(1, 2), pch=c(15, 17), col= colors1);
x = runif(100);
y = runif(100);
seq = lapply(1:length(x), function(i) list(v = c(x[i], y[i])));
dist = function(p1, p2) {
sqrt(sum((p1$v - p2$v) ^ 2))
}
index = function(p1, p2) {
d = dist(p1, p2);
if (d <= 0.5) {
0
} else if (d <= 0.75) {
1
} else {
-1
}
}
c = bcluster(seq, index);
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
colors2 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
i=1;
print(colors1);
print(names(c));
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors2[i]);
i=i+1;
}
x = runif(100);
y = runif(100);
seq = lapply(1:length(x), function(i) list(v = c(x[i], y[i])));
dist = function(p1, p2) {
sqrt(sum((p1$v - p2$v) ^ 2))
}
index = function(p1, p2) {
d = dist(p1, p2);
if (d <= 0.45) {
0
} else if (d <= 0.75) {
1
} else {
-1
}
}
c = bcluster(seq, index);
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
colors2 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
i=1;
print(colors1);
print(names(c));
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors2[i]);
i=i+1;
}
x = runif(100);
y = runif(100);
seq = lapply(1:length(x), function(i) list(v = c(x[i], y[i])));
dist = function(p1, p2) {
sqrt(sum((p1$v - p2$v) ^ 2))
}
index = function(p1, p2) {
d = dist(p1, p2);
if (d <= 0.45) {
0
} else if (d <= 0.65) {
1
} else {
-1
}
}
c = bcluster(seq, index);
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
colors2 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
i=1;
print(colors1);
print(names(c));
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors2[i]);
i=i+1;
}
x = runif(100);
y = runif(100);
seq = lapply(1:length(x), function(i) list(v = c(x[i], y[i])));
dist = function(p1, p2) {
sqrt(sum((p1$v - p2$v) ^ 2))
}
index = function(p1, p2) {
d = dist(p1, p2);
if (d <= 0.45) {
0
} else if (d <= 0.6) {
1
} else {
-1
}
}
c = bcluster(seq, index);
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
colors2 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
i=1;
print(colors1);
print(names(c));
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors2[i]);
i=i+1;
}
x = runif(100);
y = runif(100);
seq = lapply(1:length(x), function(i) list(v = c(x[i], y[i])));
dist = function(p1, p2) {
sqrt(sum((p1$v - p2$v) ^ 2))
}
index = function(p1, p2) {
d = dist(p1, p2);
if (d <= 0.3) {
0
} else if (d <= 0.6) {
1
} else {
-1
}
}
c = bcluster(seq, index);
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
colors2 = c("red","blue","green","yellow","purple","black", "gray","cyan","pink","skyblue", "limegreen");
i=1;
print(colors1);
print(names(c));
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors2[i]);
i=i+1;
}
colors()
x = runif(100);
y = runif(100);
seq = lapply(1:length(x), function(i) list(v = c(x[i], y[i])));
dist = function(p1, p2) {
sqrt(sum((p1$v - p2$v) ^ 2))
}
index = function(p1, p2) {
d = dist(p1, p2);
if (d <= 0.3) {
0
} else if (d <= 0.6) {
1
} else {
-1
}
}
c = bcluster(seq, index);
plot(x, y, pch = 2, col = "white");
colors1 = c("red","blue","green","yellow","steelblue","purple","black", "orange","gray","cyan","pink","skyblue", "limegreen");
i=1;
print(colors1);
print(names(c));
for(name in names(c)) {
points(x[c[[name]]], y[c[[name]]], pch=25, col= colors1[i], bg=colors1[i]);
i=i+1;
}
library(bclusterTree)
