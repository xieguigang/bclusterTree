library(bclusterTree)
library(bclusterTree)
x = runif(100);
x
x[[1]]
x[[2]]
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
index
buildBTree(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
buildBTree(x, index)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
bcluster(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
bcluster(x, index)
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
objects=x
objects
root = binaryTree(1, 1);
tree = list();
tree[[1]] = root;
closure   = environment();
tree
save = function(x) assign("tree", x, envir = closure);
read = function() get("tree", envir = closure);
evalIndex = function(bin, y) {
x = objects[[bin$index]];
i = compares(x, y);
i;
}
compares
compares = index
compares
save(tree);
str(tree)
index    = 1;
item = objects[[1]]
item
bin   = root;
root
index = index + 1;
index
bin
index
item
order = evalIndex(bin, item);
order
index
l = list(a=1,b=2,c=3)
l[2:length(l)]
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
x
x =3
repeat {  x = 5; break  }
x
x =3
i=1
repeat {  x = 5; i=i+1; if (i > 3) { break}  }
i
x
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.3) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
library(bclusterTree)
str(bcluster(x, index));
library(bclusterTree)
str(bcluster(x, index));
library(bclusterTree)
str(bcluster(x, index));
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
library(bclusterTree)
x = runif(100);
index = function(a, b) {
if (abs(a - b) <= 0.1) {
0
} else if (a > b) {
1
} else {
-1
}
}
str(bcluster(x, index));
library(bclusterTree)
library(bclusterTree)
