load("C:/Users/Administrator/Downloads/GABA.rda")
require(tools);
consistency.plot <- function(sample, pairs, repeats = 3, size = c(6000,4500), resolution = 550) {
pairs <- read.csv(pairs);
iTraq.consistency(sample, pairs, repeats = 3, size, resolution);
}
### regression scatter plot function tools for the iTraq data samples consistency check
### @sample: iTraq sample data output
### @pairs: a dataframe object, that each row should contians two string value, like
###  ,  X,  Y
### 1, C1, C2
### 2, C1, C3
### 3, C2, C3
###
iTraq.consistency <- function(sample, pairs, repeats = 3, size = c(6000, 4500), resolution = 550) {
DIR <- dirname(sample);
DIR <- paste(DIR, file_path_sans_ext(basename(path = sample)), sep="/")
# setwd(DIR)
#
scatter.tiff <- paste(DIR, "-consistency-scatterplot2.png")
options(stringsAsFactors = FALSE)
# data consistency check by using regression scatter plot
# scatter plot
raw <- read.csv(sample, header=TRUE)
png(scatter.tiff, width=size[1], height=size[2], res=resolution)
n.compares <- nrow(pairs);
n.compares <- n.compares / repeats;
layout <- c(n.compares, repeats);
print(layout);
par(mfrow = layout);
raw = data.frame(raw, stringsAsFactors = FALSE);
tryCatch({
for (i in 1:nrow(pairs)) {
x <- pairs[i, ];
x <- as.vector(unlist(x));
print(x);
regression.plot(raw, x[1], x[2]);
}
}, error = function(e) {
print(e);
})
dev.off();
}
### apply the regression scatter plot for each sample pairs
### @raw: The raw sample data inputs
### @sx, sy: The columns title in the @raw sample dataframe
regression.plot <- function(raw, sx, sy) {
xl <- paste("sample", sx)
yl <- paste("sample", sy)
x <- as.numeric(as.vector(raw[,sx]))
y <- as.numeric(as.vector(raw[,sy]))
title <- paste(sx, "vs", sy)
plot(x, y, col="red", pch=4, xlab= xl, ylab=yl, main=title)
fit <- lm(x~y)
abline(fit, col="black", lwd=2) # regression line (y~x)
r2=paste("=", round(summary(fit)$adj.r.squared, 4))
text(3/4 * max(x, na.rm=T), 1/3 * max(y, na.rm=T), bquote(R^2~.(r2)))
}
consistency.plot("D:/OneDrive/20190308-BOVINE/1. samples/Sample9-ProteinGroups.sample_name.normalized.csv", "D:/OneDrive/20190308-BOVINE/1. samples/pairs.csv" )
require(tools);
consistency.plot <- function(sample, pairs, repeats = 3, size = c(6000,4500), resolution = 550) {
pairs <- read.csv(pairs);
iTraq.consistency(sample, pairs, repeats = 3, size, resolution);
}
### regression scatter plot function tools for the iTraq data samples consistency check
### @sample: iTraq sample data output
### @pairs: a dataframe object, that each row should contians two string value, like
###  ,  X,  Y
### 1, C1, C2
### 2, C1, C3
### 3, C2, C3
###
iTraq.consistency <- function(sample, pairs, repeats = 3, size = c(6000, 4500), resolution = 550) {
DIR <- dirname(sample);
DIR <- paste(DIR, file_path_sans_ext(basename(path = sample)), sep="/")
# setwd(DIR)
#
scatter.tiff <- paste(DIR, "-consistency-scatterplot2.png")
options(stringsAsFactors = FALSE)
# data consistency check by using regression scatter plot
# scatter plot
raw <- read.csv(sample, header=TRUE)
png(scatter.tiff, width=size[1], height=size[2], res=resolution)
n.compares <- nrow(pairs);
n.compares <- n.compares / repeats;
layout <- c(n.compares, repeats);
print(layout);
par(mfrow = layout);
raw = data.frame(raw, stringsAsFactors = FALSE);
print(pairs)
for (i in 1:nrow(pairs)) {
x <- pairs[i, ];
x <- as.vector(unlist(x));
print(x);
regression.plot(raw, x[1], x[2]);
}
dev.off();
}
### apply the regression scatter plot for each sample pairs
### @raw: The raw sample data inputs
### @sx, sy: The columns title in the @raw sample dataframe
regression.plot <- function(raw, sx, sy) {
xl <- paste("sample", sx)
yl <- paste("sample", sy)
x <- as.numeric(as.vector(raw[,sx]))
y <- as.numeric(as.vector(raw[,sy]))
title <- paste(sx, "vs", sy)
plot(x, y, col="red", pch=4, xlab= xl, ylab=yl, main=title)
fit <- lm(x~y)
abline(fit, col="black", lwd=2) # regression line (y~x)
r2=paste("=", round(summary(fit)$adj.r.squared, 4))
text(3/4 * max(x, na.rm=T), 1/3 * max(y, na.rm=T), bquote(R^2~.(r2)))
}
consistency.plot("D:/OneDrive/20190308-BOVINE/1. samples/Sample9-ProteinGroups.sample_name.normalized.csv", "D:/OneDrive/20190308-BOVINE/1. samples/pairs.csv" )
require(tools);
consistency.plot <- function(sample, pairs, repeats = 3, size = c(6000,4500), resolution = 550) {
pairs <- read.csv(pairs);
iTraq.consistency(sample, pairs, repeats = 3, size, resolution);
}
### regression scatter plot function tools for the iTraq data samples consistency check
### @sample: iTraq sample data output
### @pairs: a dataframe object, that each row should contians two string value, like
###  ,  X,  Y
### 1, C1, C2
### 2, C1, C3
### 3, C2, C3
###
iTraq.consistency <- function(sample, pairs, repeats = 3, size = c(6000, 4500), resolution = 550) {
DIR <- dirname(sample);
DIR <- paste(DIR, file_path_sans_ext(basename(path = sample)), sep="/")
# setwd(DIR)
#
scatter.tiff <- paste(DIR, "-consistency-scatterplot2.png")
options(stringsAsFactors = FALSE)
# data consistency check by using regression scatter plot
# scatter plot
raw <- read.csv(sample, header=TRUE)
png(scatter.tiff, width=size[1], height=size[2], res=resolution)
n.compares <- nrow(pairs);
n.compares <- n.compares / repeats;
layout <- c(n.compares, repeats);
print(layout);
print(head(raw))
par(mfrow = layout);
raw = data.frame(raw, stringsAsFactors = FALSE);
print(pairs)
for (i in 1:nrow(pairs)) {
x <- pairs[i, ];
x <- as.vector(unlist(x));
print(x);
regression.plot(raw, x[1], x[2]);
}
dev.off();
}
### apply the regression scatter plot for each sample pairs
### @raw: The raw sample data inputs
### @sx, sy: The columns title in the @raw sample dataframe
regression.plot <- function(raw, sx, sy) {
xl <- paste("sample", sx)
yl <- paste("sample", sy)
x <- as.numeric(as.vector(raw[,sx]))
y <- as.numeric(as.vector(raw[,sy]))
title <- paste(sx, "vs", sy)
plot(x, y, col="red", pch=4, xlab= xl, ylab=yl, main=title)
fit <- lm(x~y)
abline(fit, col="black", lwd=2) # regression line (y~x)
r2=paste("=", round(summary(fit)$adj.r.squared, 4))
text(3/4 * max(x, na.rm=T), 1/3 * max(y, na.rm=T), bquote(R^2~.(r2)))
}
consistency.plot("D:/OneDrive/20190308-BOVINE/1. samples/Sample9-ProteinGroups.sample_name.normalized.csv", "D:/OneDrive/20190308-BOVINE/1. samples/pairs.csv" )
require(tools);
consistency.plot <- function(sample, pairs, repeats = 3, size = c(6000,4500), resolution = 550) {
pairs <- read.csv(pairs);
iTraq.consistency(sample, pairs, repeats = 3, size, resolution);
}
### regression scatter plot function tools for the iTraq data samples consistency check
### @sample: iTraq sample data output
### @pairs: a dataframe object, that each row should contians two string value, like
###  ,  X,  Y
### 1, C1, C2
### 2, C1, C3
### 3, C2, C3
###
iTraq.consistency <- function(sample, pairs, repeats = 3, size = c(6000, 4500), resolution = 550) {
DIR <- dirname(sample);
DIR <- paste(DIR, file_path_sans_ext(basename(path = sample)), sep="/")
# setwd(DIR)
#
scatter.tiff <- paste(DIR, "-consistency-scatterplot2.png")
options(stringsAsFactors = FALSE)
# data consistency check by using regression scatter plot
# scatter plot
raw <- read.csv(sample, header=TRUE)
png(scatter.tiff, width=size[1], height=size[2], res=resolution)
n.compares <- nrow(pairs);
n.compares <- n.compares / repeats;
layout <- c(n.compares, repeats);
print(layout);
print(head(raw))
par(mfrow = layout);
raw = data.frame(raw, stringsAsFactors = FALSE);
print(pairs)
for (i in 1:nrow(pairs)) {
x <- pairs[i, ];
x <- as.vector(unlist(x));
renames <- cbind(x =1, y =2)
colnames(renames) <- x;
x <- colnames(renames);
print(x);
regression.plot(raw, x[1], x[2]);
}
dev.off();
}
### apply the regression scatter plot for each sample pairs
### @raw: The raw sample data inputs
### @sx, sy: The columns title in the @raw sample dataframe
regression.plot <- function(raw, sx, sy) {
xl <- paste("sample", sx)
yl <- paste("sample", sy)
x <- as.numeric(as.vector(raw[,sx]))
y <- as.numeric(as.vector(raw[,sy]))
title <- paste(sx, "vs", sy)
plot(x, y, col="red", pch=4, xlab= xl, ylab=yl, main=title)
fit <- lm(x~y)
abline(fit, col="black", lwd=2) # regression line (y~x)
r2=paste("=", round(summary(fit)$adj.r.squared, 4))
text(3/4 * max(x, na.rm=T), 1/3 * max(y, na.rm=T), bquote(R^2~.(r2)))
}
consistency.plot("D:/OneDrive/20190308-BOVINE/1. samples/Sample9-ProteinGroups.sample_name.normalized.csv", "D:/OneDrive/20190308-BOVINE/1. samples/pairs.csv" )
dev.off()
dev.off()
dev.off()
dev.off()
consistency.plot("D:/OneDrive/20190308-BOVINE/1. samples/Sample9-ProteinGroups.sample_name.normalized.csv", "D:/OneDrive/20190308-BOVINE/1. samples/pairs.csv" )
q()
300-85
F <- function(x) if (x == 1) 1 else x * F(x - 1)
F(4)
F(5)
a=85
b=100
c=215
d=1900
X = F(a+b) * F(c+d) * F(a+c) * F(b+ d)
X
F <- function(x) seq(1,x, by = 1)
X = F(a+b) * F(c+d) * F(a+c) * F(b+ d)
X
counts = (matrix(data = c(85, 215, 100, 1900), nrow = 2))
counts
fisher.test(counts)
-log10(2.2e-16)
log(2*3)
log(2)+log(3)
fisher.test(matrix(c(85,100,215,1900), nrow = 2)
)
fisher.test(matrix(c(45,100,255,1900), nrow = 2))
fisher.test(matrix(c(35,100,265,1900), nrow = 2))
fisher.test(matrix(c(15,100,285,1900), nrow = 2))
fisher.test(matrix(c(20,100,280,1900), nrow = 2))
fisher.test(matrix(c(20,70,280,1930), nrow = 2))
fisher.test(matrix(c(35,70,265,1930), nrow = 2))
fisher.test(matrix(c(3,40,297,19960), nrow = 2))
fisher.test(matrix(c(1,9,11,3), nrow = 2))
fisher.test(matrix(c(65,70,235,19930), nrow = 2))
-log10(7.9690311268777633E-84)
fisher.test(matrix(c(65,70,235,19930), nrow = 2))
F <- fisher.test(matrix(c(65,70,235,19930), nrow = 2))
F
names(F)
F$p.value
4252-133
-log10(2.82526342406577E-175)
F <- fisher.test(matrix(c(132,133,0,4119), nrow = 2))
F$p.value
a = 10
b = 1000
c = 90
d = 20000-1000
fisher.test(matrix(c(a,b,c,d), nrow = 2))
a = 2
b = 20
c = 1000-2
d = 20000 - 20
fisher.test(matrix(c(a,b,c,d), nrow = 2))
20000^-56
20000^-5
fr <- function(x) if (x<=0) 1 else { p <- 1; while (x > 1) { p = p * x; x = x- 1;  } p;   }
fr <- function(x) if (x<=0) 1 else { p <- 1; while (x > 1) { p = p * x; x = x- 1;  }; p;   }
fr
fr(1)
fr(2)
fr(3)
fr(4)
fr(5)
1*2*3*4*5
View(fr)
View(fr)
fr
F <- function(a,b,c,d) fr(a+b)*fr(c+d)*fr(a+c)*fr(b+d) / (fr(a)*fr(b)*fr(c)*fr(d)* fr(a+b+c+d))
F
F(a = 132, b = 133, c = 0, d = 4119)
add2 = function(x,y,z) x + z + y + 2
print( add2((1+2)^4 * 88 ,500,1) + 9^2)
all <- matrix(c(120,133,280,4119), nrow=2)
all
all <- matrix(c(120,280,133,4119), nrow=2)
all
down <- matrix(c(90,60,133,4119), nrow=2)
down
fisher.test(all)$p.value
fisher.test(down)$p.value
index <- NULL
a<- c(1,2,3,4)
a[index]
a[NULL]
a[NA]
l <- list(a=1,b=2)
l$NULL
l[[NULL]]
a
a[c(7,8)] <- 99
a
a[c(7,8)] <- c(99,88,88,77)
l
l[[NULL]]
aa <- NULL
aa[99]
aa[c(99,6)]
length(aa)
help("dev.off")
rgb((0:15)/15, green = 0, blue = 0, names = paste("red", 0:15, sep = "."))
source
source()
help(raw)
x <- "A test string"
charToRaw(x)
F
rawToBits(charToRaw(x))
install.packages("./aaaa.tar.gz")
install.package("./aaaa.tar.gz")
install.packages("D:/aaaa.tar.gz")
install.packages("D:/aaaa.zip")
installed.packages()
installed.packages()
help(text)
help(string)
??string
string
require(rlang)
string
string(1)
string(111111111)
string(c(11,111,111,1))
string(c(11,111,131,1))
help(html)
help(igraph)
install.packages("igraph")
help(igraph)
??igraph
str(list(a=1,c=c(3,3,3),d=F))
str(list(a=1,c=c(3,3,3),d=FALSE))
str(list(a=1,c=c(3,3,3),d=FALSE, dd =c("str","str")))
str(NULL)
help(str)
str(list(a=1,c=c(3,3,3),d=FALSE, dd =c("str","str")))
print(str(list(a=1,c=c(3,3,3),d=FALSE, dd =c("str","str"))))
a=str(list(a=1,c=c(3,3,3),d=FALSE, dd =c("str","str")))
a
help("cat")
help(lapply)
install.packages
help(install.packages)
help("base")
help(load)
load("E:/smartnucl_integrative/biodeep_pipeline/Biodeep_Rpackage/biodeep/data/libs/kegg/hsa.rda")
View(`F`)
View(fr)
View(`F`)
View(metpa)
metpa[["rbc.list"]][["hsa00010"]]
metpa[["path.ids"]][["Ascorbate and aldarate metabolism"]]
metpa[["path.smps"]][["SMP00035"]]
help(View)
help("sink")
help("head")
unlist(list(a = c(1,2,3), b = c(F,F,F,T)))
unlist(list(a = c(1,2,3), b = c(FALSE,FALSE,FALSE,TRUE)))
help("unlist")
help(memory.size)
(y <- as.roman(1 : 5))
askYesNo("Do you want to use askYesNo?")
askYesNo("Do you want to use askYesNo?")
askYesNo("Do you want to use askYesNo?")
interactive()
help("interactive")
help(circos.initialize)
Install.packages(“circlize”)
Install.packages("circlize")
install.packages("circlize")
install.packages("GlobalOptions")
help("system")
print(writeLines(c(1,2,3), con = "D:/a.txt"))
print(writeLines(as.character(c(1,2,3)), con = "D:/a.txt"))
help("writeLines")
sweep
help(sweep)
source("https://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
biocLite(c("AnnotationDbi", "impute","GO.db", "preprocessCore"))
BiocManager::install
BiocManager::install(c("AnnotationDbi", "impute","GO.db", "preprocessCore"))
BiocManager::install(c("WGCNA", "stringr", "reshape2"))
install.packages("blob")
BiocManager::install(GO.db")
)
)))
f
BiocManager::install("GO.db")
install.packages("pkgconfig")
BiocManager::install("GO.db")
BiocManager::install("WGCNA")
library(WGCNA)
install.packages("gtable")
library(WGCNA)
install.packages("lifecycle")
library(WGCNA)
install.packages("munsell")
library(WGCNA)
install.packages("base64enc")
library(WGCNA)
install.packages("RColorBrewer")
library(WGCNA)
install.packages("png")
library(WGCNA)
install.packages("gridExtra")
library(WGCNA)
install.packages("checkmate")
library(WGCNA)
install.packages(c("backports", "class", "fastmap", "Matrix", "nnet", "RSQLite", "spatial"))
install.packages(c("backports", "class", "fastmap", "Matrix", "nnet", "RSQLite", "spatial"))
install.packages(c("backports", "class", "fastmap", "Matrix", "nnet", "RSQLite", "spatial"))
install.packages(c("backports", "class", "fastmap", "Matrix", "nnet", "RSQLite", "spatial"))
install.packages(c("backports", "class", "fastmap", "Matrix", "nnet", "RSQLite", "spatial"))
rbind
help(rbind)
d = data.frame(A =1, b = c(1,2,5,8,9), i = 1:5)
d
dd = data.frame(Ac =1, b = c(1,2,5,8,9), i = 1:5)
dd
rbind(d,dd)
a= NULL
a
NULL
a[,"family" ] = "1"
nrow(NULL)
a = c(0.51,0.51,0.8)
a
t.tes
t.test
t.test(a)
t.test( rep( mean(a), times=3))
t.test( rep( mean(a), time=3))
rep( mean(a), time=3)
rep( mean(a), time=5)
t.test( rep( mean(a), time=5))
x = c(2,3,3,6,6,6)
x
save(x, file = "D:/x.rda")
require(VisualBasic.R)
kmeans
setwd("E:/tree")
